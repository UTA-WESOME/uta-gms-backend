# Generated by Django 4.2.3 on 2023-11-20 10:35

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Alternative',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Alternative name', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name', max_length=64)),
                ('color', models.CharField(help_text='Color of the category', max_length=15)),
                ('active', models.BooleanField(default=True, help_text='Should the category be used in calculating results?')),
                ('hasse_graph', models.JSONField(help_text="Graph that represents necessary relations between project's alternatives", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='utagmsapi.category')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Criterion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Criterion name', max_length=64)),
                ('gain', models.BooleanField(help_text='Is the criterion of the type gain?')),
                ('linear_segments', models.IntegerField(help_text='How many linear segments does the criterion have?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(help_text='User email', max_length=32, unique=True)),
                ('password', models.CharField(help_text='User password', max_length=255)),
                ('name', models.CharField(help_text='User first name', max_length=64)),
                ('surname', models.CharField(help_text='User last name', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('name', 'surname', 'email'),
            },
        ),
        migrations.CreateModel(
            name='Ranking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_ranking', models.IntegerField(blank=True, help_text='Alternative reference ranking', null=True)),
                ('ranking', models.IntegerField(help_text='Alternative ranking')),
                ('ranking_value', models.FloatField(default=0.0, help_text="Alternative's final value in the ranking")),
                ('worst_position', models.IntegerField(blank=True, help_text='Worst position the alternative can have in the final ranking', null=True)),
                ('best_position', models.IntegerField(blank=True, help_text='Best position the alternative can have in the final ranking', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alternative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rankings', to='utagmsapi.alternative')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rankings', to='utagmsapi.category')),
            ],
            options={
                'ordering': ('category', 'alternative'),
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Project name', max_length=64)),
                ('description', models.CharField(blank=True, help_text='Project description', max_length=256)),
                ('shareable', models.BooleanField(help_text='Project shareability')),
                ('pairwise_mode', models.BooleanField(default=False, help_text="Set to 'True' if Pairwise Comparisons will be used, or 'False' if Reference Ranking is preferred.")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='utagmsapi.user')),
            ],
            options={
                'ordering': ('name', 'user'),
            },
        ),
        migrations.CreateModel(
            name='PreferenceIntensity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alternative_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preference_intensities_1', to='utagmsapi.alternative')),
                ('alternative_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preference_intensities_2', to='utagmsapi.alternative')),
                ('alternative_3', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preference_intensities_3', to='utagmsapi.alternative')),
                ('alternative_4', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preference_intensities_4', to='utagmsapi.alternative')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='preference_intensities', to='utagmsapi.category')),
                ('criterion', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='preference_intensities', to='utagmsapi.criterion')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preference_intensities', to='utagmsapi.project')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(help_text='Performance value')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alternative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='utagmsapi.alternative')),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='utagmsapi.criterion')),
            ],
            options={
                'ordering': ('criterion', 'alternative'),
            },
        ),
        migrations.CreateModel(
            name='Percentage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField(help_text='Position of the percentage')),
                ('percent', models.FloatField(help_text='How many percent of cases was the alternative in this position?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alternative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='percentages', to='utagmsapi.alternative')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='percentages', to='utagmsapi.category')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='PairwiseComparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('preference', 'Preference'), ('indifference', 'Indifference')], max_length=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alternative_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pairwise_comparisons_1', to='utagmsapi.alternative')),
                ('alternative_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pairwise_comparisons_2', to='utagmsapi.alternative')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pairwise_comparisons', to='utagmsapi.category')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='FunctionPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordinate', models.FloatField(help_text='Ordinate')),
                ('abscissa', models.FloatField(help_text='Abscissa')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='function_points', to='utagmsapi.category')),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='function_points', to='utagmsapi.criterion')),
            ],
            options={
                'ordering': ('criterion',),
            },
        ),
        migrations.CreateModel(
            name='CriterionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criterion_categories', to='utagmsapi.category')),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criterion_categories', to='utagmsapi.criterion')),
            ],
            options={
                'ordering': ('category',),
            },
        ),
        migrations.AddField(
            model_name='criterion',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='utagmsapi.project'),
        ),
        migrations.AddField(
            model_name='category',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='utagmsapi.project'),
        ),
        migrations.AddField(
            model_name='alternative',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alternatives', to='utagmsapi.project'),
        ),
        migrations.CreateModel(
            name='AcceptabilityIndex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.FloatField(help_text='In how many percent of cases is alternative_1 better than alternative_2?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alternative_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='acceptability_indices_1', to='utagmsapi.alternative')),
                ('alternative_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='acceptability_indices_2', to='utagmsapi.alternative')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='acceptability_indices', to='utagmsapi.category')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
    ]
